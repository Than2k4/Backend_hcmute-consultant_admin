import { Controller, Get, Param, Delete, UseGuards } from '@nestjs/common';
import { QuestionsService } from './questions.service';
import { AdminGuard } from 'src/common/guards/admin.guard';
import { DataResponse, ExceptionResponse } from 'src/common/response';

@Controller('questions')
export class QuestionsController {
  constructor(private readonly questionsService: QuestionsService) {}

  // üü¢ L·∫•y danh s√°ch c√¢u h·ªèi
  @UseGuards(AdminGuard)
  @Get()
  async getAllQuestions() {
    try {
      const data = await this.questionsService.findAllQuestions();
      return new DataResponse(200, 'L·∫•y danh s√°ch c√¢u h·ªèi th√†nh c√¥ng', data);
    } catch (error) {
      console.error(error);
      return new ExceptionResponse(500, 'L·ªói khi l·∫•y danh s√°ch c√¢u h·ªèi');
    }
  }

  // üü¢ Xem chi ti·∫øt 1 c√¢u h·ªèi
  @UseGuards(AdminGuard)
  @Get(':id')
  async getQuestionById(@Param('id') id: string) {
    try {
      const data = await this.questionsService.findQuestionById(id);
      if (!data) {
        return new ExceptionResponse(404, 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi');
      }
      return new DataResponse(200, 'L·∫•y chi ti·∫øt c√¢u h·ªèi th√†nh c√¥ng', data);
    } catch (error) {
      console.error(error);
      return new ExceptionResponse(500, 'L·ªói khi l·∫•y chi ti·∫øt c√¢u h·ªèi');
    }
  }

  // üü¢ X√≥a c√¢u h·ªèi (soft delete)
  @UseGuards(AdminGuard)
  @Delete(':id')
  async deleteQuestion(@Param('id') id: string) {
    try {
      const data = await this.questionsService.deleteQuestion(id);
      if (!data) {
        return new ExceptionResponse(404, 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ƒë·ªÉ x√≥a');
      }
      return new DataResponse(200, 'X√≥a c√¢u h·ªèi th√†nh c√¥ng', data);
    } catch (error) {
      console.error(error);
      return new ExceptionResponse(500, 'L·ªói khi x√≥a c√¢u h·ªèi');
    }
  }
}
